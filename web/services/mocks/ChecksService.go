// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/trento-project/trento/web/models"
)

// ChecksService is an autogenerated mock type for the ChecksService type
type ChecksService struct {
	mock.Mock
}

// GetChecksCatalog provides a mock function with given fields:
func (_m *ChecksService) GetChecksCatalog() (map[string]*models.Check, error) {
	ret := _m.Called()

	var r0 map[string]*models.Check
	if rf, ok := ret.Get(0).(func() map[string]*models.Check); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*models.Check)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChecksCatalogByGroup provides a mock function with given fields:
func (_m *ChecksService) GetChecksCatalogByGroup() (map[string]map[string]*models.Check, error) {
	ret := _m.Called()

	var r0 map[string]map[string]*models.Check
	if rf, ok := ret.Get(0).(func() map[string]map[string]*models.Check); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]*models.Check)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChecksResult provides a mock function with given fields:
func (_m *ChecksService) GetChecksResult() (map[string]*models.Results, error) {
	ret := _m.Called()

	var r0 map[string]*models.Results
	if rf, ok := ret.Get(0).(func() map[string]*models.Results); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*models.Results)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChecksResultByCluster provides a mock function with given fields: clusterName
func (_m *ChecksService) GetChecksResultByCluster(clusterName string) (*models.Results, error) {
	ret := _m.Called(clusterName)

	var r0 *models.Results
	if rf, ok := ret.Get(0).(func(string) *models.Results); ok {
		r0 = rf(clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Results)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
