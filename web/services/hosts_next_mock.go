// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package services

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/trento-project/trento/web/models"
)

// MockHostsNextService is an autogenerated mock type for the HostsNextService type
type MockHostsNextService struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: filters
func (_m *MockHostsNextService) GetAll(filters map[string][]string) (models.HostList, error) {
	ret := _m.Called(filters)

	var r0 models.HostList
	if rf, ok := ret.Get(0).(func(map[string][]string) models.HostList); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.HostList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string][]string) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSIDs provides a mock function with given fields:
func (_m *MockHostsNextService) GetAllSIDs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTags provides a mock function with given fields:
func (_m *MockHostsNextService) GetAllTags() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
